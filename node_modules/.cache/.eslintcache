[{"/home/student/Coding/projects/chuck-norris-jokes/src/index.tsx":"1","/home/student/Coding/projects/chuck-norris-jokes/src/reportWebVitals.ts":"2","/home/student/Coding/projects/chuck-norris-jokes/src/App.tsx":"3","/home/student/Coding/projects/chuck-norris-jokes/src/context/GlobalContext.tsx":"4","/home/student/Coding/projects/chuck-norris-jokes/src/GlobalStyles/GlobalStyles.tsx":"5","/home/student/Coding/projects/chuck-norris-jokes/src/MainScreen/index.tsx":"6","/home/student/Coding/projects/chuck-norris-jokes/src/containers/FormJokes.tsx":"7","/home/student/Coding/projects/chuck-norris-jokes/src/containers/JokeContent.tsx":"8","/home/student/Coding/projects/chuck-norris-jokes/src/containers/SaveJokes.tsx":"9"},{"size":500,"mtime":1622291487587,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1622291487587,"results":"12","hashOfConfig":"11"},{"size":358,"mtime":1622611805013,"results":"13","hashOfConfig":"11"},{"size":4036,"mtime":1622622422447,"results":"14","hashOfConfig":"11"},{"size":545,"mtime":1622538626116,"results":"15","hashOfConfig":"11"},{"size":731,"mtime":1622611805057,"results":"16","hashOfConfig":"11"},{"size":2535,"mtime":1622612061789,"results":"17","hashOfConfig":"11"},{"size":1206,"mtime":1622617019665,"results":"18","hashOfConfig":"11"},{"size":2237,"mtime":1622622223965,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1uosszk",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/student/Coding/projects/chuck-norris-jokes/src/index.tsx",[],["40","41"],"/home/student/Coding/projects/chuck-norris-jokes/src/reportWebVitals.ts",[],"/home/student/Coding/projects/chuck-norris-jokes/src/App.tsx",[],"/home/student/Coding/projects/chuck-norris-jokes/src/context/GlobalContext.tsx",["42"],"import { createContext, useCallback, useEffect, useState } from 'react'\n\ninterface names {\n  randomJoke: {\n    id: number\n    joke: string\n    categories: string[]\n  }\n  numberOfJoke: number\n  impersonateName: string\n  firstName: string\n  lastName: string\n  fetchJoke: () => {}\n  getRandomJoke: () => {}\n  handlingSelectCategory: (e: React.ChangeEvent<HTMLInputElement>) => void\n  handlingInputName: (e: React.ChangeEvent<HTMLInputElement>) => void\n  decreaseJoke: any\n  increaseJoke: any\n}\n\nconst initialValues: names = {\n  randomJoke: {\n    id: 37,\n    joke: '',\n    categories: [],\n  },\n  numberOfJoke: 0,\n  impersonateName: '',\n  firstName: '',\n  lastName: '',\n  fetchJoke: async () => {},\n  getRandomJoke: async () => {},\n  handlingSelectCategory: async () => {},\n  handlingInputName: async () => {},\n  decreaseJoke: async () => {},\n  increaseJoke: async () => {},\n}\n\nconst GlobalContext = createContext(initialValues)\n\nconst GlobalProvider: React.FC = ({ children }) => {\n  const [randomJoke, setRandomJoke] = useState(initialValues.randomJoke)\n  const [impersonateName, setImpersonateName] = useState(\n    initialValues.impersonateName\n  )\n  const [firstName, setFirstName] = useState<string>('Chuck')\n  const [lastName, setLastName] = useState<string>('Norris')\n  const [selectedCategory, setSelectedCategory] = useState<string>('')\n  const [countJokesNumber, setCountJokesNumber] = useState(\n    initialValues.numberOfJoke\n  )\n\n  const apiBase: any = 'https://api.icndb.com/'\n  const fetchJoke: any = async (url: string) => {\n    const response = await fetch(`${apiBase}${url}`)\n\n    if (!response.ok) {\n      throw new Error(`Could not fetch ${url}`)\n    }\n    return await response.json()\n  }\n\n  // Get joke randomly\n  const getRandomJoke = useCallback(async () => {\n    if (selectedCategory !== '') {\n      const joke = await fetchJoke(`jokes/random?category=${selectedCategory}`)\n      return setRandomJoke(joke.value.joke)\n    } else if (impersonateName !== '') {\n      const joke = await fetchJoke(\n        `jokes/random?firstName=${firstName}&lastName=${lastName}`\n      )\n      return setRandomJoke(joke.value)\n    } else if (selectedCategory !== '' && impersonateName !== '') {\n      const joke = await fetchJoke(\n        `jokes/random?category=${selectedCategory}&firstName=${firstName}&lastName=${lastName}`\n      )\n      return setRandomJoke(joke.value.joke)\n    } else if (countJokesNumber > 0) {\n      const joke = await fetchJoke(\n        `jokes/random?${countJokesNumber}&${selectedCategory}&${firstName}&${lastName}`\n      )\n      console.log(joke)\n      return setRandomJoke(joke)\n    } else {\n      const joke = await fetchJoke('jokes/random?')\n      return setRandomJoke(joke.value)\n    }\n  }, [selectedCategory, impersonateName, firstName, lastName])\n\n  useEffect(() => {\n    getRandomJoke()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  // Get joke with the selected category\n  const handlingSelectCategory = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedCategory(e.target.value)\n  }\n  // Get joke with the selected category\n  const handlingInputName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    var names = e.target.value\n    setImpersonateName(names)\n    var splitedName = names.split(' ')\n    setFirstName(splitedName[0])\n    setLastName(splitedName[1])\n  }\n\n  // Increase joke number\n  const decreaseJoke = () => {\n    if (countJokesNumber > 0) {\n      setCountJokesNumber(countJokesNumber - 1)\n    }\n  }\n  // Decrease joke number\n  const increaseJoke = () => {\n    setCountJokesNumber(countJokesNumber + 1)\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        randomJoke,\n        fetchJoke,\n        numberOfJoke: countJokesNumber,\n        impersonateName,\n        firstName,\n        lastName,\n        getRandomJoke,\n        handlingSelectCategory,\n        handlingInputName,\n        decreaseJoke,\n        increaseJoke,\n      }}>\n      {children}\n    </GlobalContext.Provider>\n  )\n}\nexport { GlobalContext, initialValues, GlobalProvider }\n","/home/student/Coding/projects/chuck-norris-jokes/src/GlobalStyles/GlobalStyles.tsx",[],"/home/student/Coding/projects/chuck-norris-jokes/src/MainScreen/index.tsx",[],"/home/student/Coding/projects/chuck-norris-jokes/src/containers/FormJokes.tsx",[],"/home/student/Coding/projects/chuck-norris-jokes/src/containers/JokeContent.tsx",[],"/home/student/Coding/projects/chuck-norris-jokes/src/containers/SaveJokes.tsx",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":88,"column":6,"nodeType":"49","endLine":88,"endColumn":62,"suggestions":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'countJokesNumber'. Either include it or remove the dependency array.","ArrayExpression",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [selectedCategory, impersonateName, countJokesNumber, firstName, lastName]",{"range":"56","text":"57"},[2723,2779],"[selectedCategory, impersonateName, countJokesNumber, firstName, lastName]"]